{
  "name": "Hyperkit",
  "tagline": "Hyperkit is a flat, Ruby-based API wrapper for LXD, the next-generation hypervisor.",
  "body": "# Hyperkit\r\n\r\n[![Gem Version](https://badge.fury.io/rb/hyperkit.svg)](https://badge.fury.io/rb/hyperkit) [![Yard Docs](http://img.shields.io/badge/yard-docs-blue.svg)](http://rubydoc.info/github/jeffshantz/hyperkit/master) [![Build Status](https://travis-ci.org/jeffshantz/hyperkit.svg?branch=master)](https://travis-ci.org/jeffshantz/hyperkit) [![Coverage Status](https://coveralls.io/repos/github/jeffshantz/hyperkit/badge.svg?branch=master)](https://coveralls.io/github/jeffshantz/hyperkit?branch=master)\r\n\r\nHyperkit is a flat API wrapper for LXD, the next-generation hypervisor.  It is\r\nshamelessly based on the design of Octokit, the popular wrapper for the GitHub\r\nAPI.\r\n\r\n## Installation\r\n\r\nAdd this line to your application's Gemfile:\r\n\r\n```ruby\r\ngem 'hyperkit'\r\n```\r\n\r\nAnd then execute:\r\n\r\n```\r\n$ bundle\r\n```\r\n\r\nOr install it yourself as:\r\n\r\n```\r\n$ gem install hyperkit\r\n```\r\n\r\n## Usage examples\r\n\r\n```ruby\r\nrequire 'hyperkit'\r\n\r\nlxd = Hyperkit::Client.new(api_endpoint: \"https://lxd.example.com\", verify_ssl: false)\r\n\r\n# Create a new container and start it\r\nlxd.create_container(\"test-container\", alias: \"ubuntu/trusty/amd64\")\r\nlxd.start_container(\"test-container\")\r\n\r\n# Execute a command in a container\r\nlxd.execute_command(\"test-container\", \"bash -c 'echo hello > /tmp/test.txt'\")\r\n\r\n# Create an image from a container and assign an alias to it\r\nresponse = lxd.create_image_from_container(\"test-container\")\r\nlxd.create_image_alias(response.metadata.fingerprint, \"ubuntu/custom\")\r\n\r\n# Take a snapshot of a container (note that CRIU must be installed to snapshot\r\n# a running container)\r\nlxd.create_snapshot(\"test-container\", \"test-snapshot\")\r\n\r\n# Migrate a container (or a snapshot) from one server to another\r\n# Note that CRIU must be installed on both LXD servers to migrate a running\r\n# container.\r\nlxd2 = Hyperkit::Client.new(api_endpoint: \"https://lxd2.example.com\")\r\nsource = lxd2.init_migration(\"remote-container\")\r\nlxd.migrate(source, \"migrated-container\")\r\n```\r\n\r\nEach method in the API documentation has at least one example of its usage.   Please see the documentation for the following modules:\r\n\r\n* [Certificates](http://www.rubydoc.info/github/jeffshantz/hyperkit/master/Hyperkit/Client/Certificates)\r\n* [Containers](http://www.rubydoc.info/github/jeffshantz/hyperkit/master/Hyperkit/Client/Containers)\r\n* [Images](http://www.rubydoc.info/github/jeffshantz/hyperkit/master/Hyperkit/Client/Images)\r\n* [Networks](http://www.rubydoc.info/github/jeffshantz/hyperkit/master/Hyperkit/Client/Networks)\r\n* [Operations](http://www.rubydoc.info/github/jeffshantz/hyperkit/master/Hyperkit/Client/Operations)\r\n* [Profiles](http://www.rubydoc.info/github/jeffshantz/hyperkit/master/Hyperkit/Client/Profiles)\r\n\r\n## Requirements\r\n\r\nHyperkit supports **LXD 2.0.0 and above**, and **Ruby 2.0 and above**.\r\n\r\nTo get started, you'll need to first enable the HTTPS API on your LXD server:\r\n\r\n```\r\n$ lxc config set core.https_address 127.0.0.1\r\n```\r\n\r\nTo listen on all interfaces, replace `127.0.0.1` with `0.0.0.0`.\r\n\r\n### Making requests\r\n\r\nBeing based on Octokit, [API methods][] are available as module methods\r\n(consuming module-level configuration) or as client instance methods.\r\n\r\n```ruby\r\nHyperkit.configure do |c|\r\n  c.api_endpoint = 'https://lxd.example.com:8443'\r\n  c.verify_ssl = false\r\nend\r\n\r\n# Create an Ubuntu 14.04 container\r\nHyperkit.create_container(\"test-container\", alias: \"ubuntu/trusty/amd64\")\r\n```\r\nor\r\n\r\n```ruby\r\nclient = Octokit::Client.new(api_endpoint: 'https://lxd.example.com:8443', verify_ssl: false)\r\n\r\n# Create an Ubuntu 14.04 container\r\nclient.create_container(\"test-container\", alias: \"ubuntu/trusty/amd64\")\r\n```\r\n\r\n[API methods]: http://www.rubydoc.info/list/github/jeffshantz/hyperkit/master/method\r\n\r\n## Authentication\r\n\r\nThe LXD API uses client-side certificates to authenticate clients.  By\r\ndefault, Hyperkit uses the following files:\r\n\r\n* Certificate: `ENV['HOME']/.config/lxc/client.crt`\r\n* Private key: `ENV['HOME']/.config/lxc/client.key`\r\n\r\nTo specify alternate files:\r\n\r\n```\r\nclient = Hyperkit::Client.new(client_cert: '/path/to/crt/file', client_key: '/path/to/key/file')\r\n```\r\n\r\nor, to configure all new instances of Hyperkit:\r\n\r\n```\r\nHyperkit.configure do |c|\r\n  c.client_cert = '/path/to/crt/file'\r\n  c.client_key = '/path/to/key/file'\r\nend\r\n```\r\n\r\nIf you're running Hyperkit on your LXD host, the `lxc` tool should have\r\nalready generated your certificate and private key for you, and placed them in\r\n`~/.config/lxc`.\r\n\r\nIf you are running Hyperkit on a different host, you'll need to generate a\r\ncertificate and private key.  To do this, install OpenSSL and issue the\r\nfollowing commands:\r\n\r\n```\r\nmkdir -p ~/.config/lxc\r\nopenssl req -x509 -newkey rsa:2048 -keyout ~/.config/lxc/client.key.secure -out ~/.config/lxc/client.crt -days 3650\r\nopenssl rsa -in ~/.config/lxc/client.key.secure -out ~/.config/lxc/client.key\r\n```\r\n\r\nYou will then need to tell LXD to trust your certificate.  You can do this in\r\ntwo ways:\r\n\r\n### Option 1: Trusting your certificate using a trust password\r\n\r\nIf you have configured your LXD server with a trust password, you can use\r\nHyperkit to get your certificate trusted:\r\n\r\n```ruby\r\nrequire 'hyperkit'\r\n\r\nHyperkit.api_endpoint = 'https://lxd.example.com:8443'\r\nHyperkit.verify_ssl = false   # Needed if you're using a self-signed certificate on the server\r\n\r\nHyperkit.create_certificate(File.read(\"/path/to/your/client.crt\"), password: \"server-trust-password\")\r\n```\r\n\r\n### Option 2: Trusting your certificate using the `lxc` tool\r\n\r\nAlternatively, you can simply copy your certificate file to the LXD server and\r\nuse the `lxc` tool to trust it:\r\n\r\n```\r\nlxd-server$ lxc config trust add my-new-cert.crt\r\n```\r\n\r\n## API coverage\r\n\r\nHyperkit supports the entirety of [version 1.0 of the LXD\r\nAPI](https://github.com/lxc/lxd/blob/master/doc/rest-api.md), but does not\r\nsupport any of the Websocket API calls (e.g. `/1.0/events`).\r\n\r\n## Asynchronous Operations\r\n\r\nA good deal of the LXD API calls are asynchronous: you issue the call, and you\r\nreceive an operation ID.  You must then wait on the operation to complete.\r\nEach asynchronous method is marked as such in the Hyperkit documentation.\r\n\r\n**By default, Hyperkit provides auto-synchronization**.  When you initiate an\r\nasynchronous operation, Hyperkit will automatically wait for the operation to\r\ncomplete before returning.\r\n\r\nFor example,\r\n\r\n```ruby\r\n# By default, this will block until the container is created\r\nHyperkit.create_container(\"test-container\", alias: \"ubuntu/trusty/amd64\")\r\n```\r\n\r\nIf you wish to override this functionality, there are two ways to do this.\r\nFirst, you can pass `sync: false` to any of the asynchronous methods:\r\n\r\n```ruby\r\n# Initiates the operation and immediately returns an operation ID\r\nop = Hyperkit.create_container(\"test-container\", alias: \"ubuntu/trusty/amd64\", sync: false)\r\n\r\n# Blocks until the operation is complete\r\nHyperkit.wait_for_operation(op.id)\r\n```\r\n\r\nAlternatively, you can disable auto-synchronization at the module or class\r\nlevel:\r\n\r\n```ruby\r\nHyperkit.auto_sync = false\r\n\r\n# or\r\n\r\nclient = Hyperkit::Client.new(auto_sync: false)\r\n```\r\n\r\nAny asynchronous calls you issue after setting `auto_sync` to `false` will\r\nimmediately return an operation ID instead of blocking.  To ensure that an\r\noperation is complete, you will need to call `wait_for_operation`:\r\n\r\n```ruby\r\nHyperkit.auto_sync = false\r\n\r\nop = Hyperkit.create_container(\"test-container\", alias: \"ubuntu/trusty/amd64\")\r\nHyperkit.wait_for_operation(op.id)\r\n```\r\n\r\nNote that, after an operation completes, LXD keeps it around for only 5\r\nseconds, so if you wait too long to call `wait_for_operation`, you'll get an\r\nexception when you eventually do call it.\r\n\r\nMost users will likely want to keep `auto_sync` enabled for convenience.\r\n\r\n\r\n## Configuration and defaults\r\n\r\nHyperkit allows you to configure a new `Hyperkit::Client` instance by passing\r\noptions to its constructor.\r\n\r\nAs in Octokit, you also have the option of setting configuration at the module\r\nlevel.  If you need to create a number of client instances which will share\r\ncertain options, this ability will be useful.\r\n\r\nWhen you change options at the module level, only new `Hyperkit::Client`\r\ninstances will be affected -- any existing instances that you have created\r\nwill retain their existing configuration.\r\n\r\n### Configuring module defaults\r\n\r\nEvery writable attribute in {Hyperkit::Configurable} can be set one at a time:\r\n\r\n```ruby\r\nHyperkit.api_endpoint = 'https://lxd.example.com:8443'\r\nHyperkit.verify_ssl   = false\r\nHyperkit.client_cert  = '/home/user/client.crt'\r\nHyperkit.client_key   = '/home/user/client.key'\r\n```\r\n\r\nor in batch:\r\n\r\n```ruby\r\nHyperkit.configure do |c|\r\n  c.api_endpoint = 'https://lxd.example.com:8443'\r\n  c.verify_ssl   = false\r\n  c.client_cert  = '/home/user/client.crt'\r\n  c.client_key   = '/home/user/client.key'\r\nend\r\n```\r\n\r\n### Using ENV variables\r\n\r\nDefault configuration values are specified in {Hyperkit::Default}. Many\r\nattributes will look for a default value from the `ENV` before returning\r\nHyperkit's default.\r\n\r\n```ruby\r\n# Given $HYPERKIT_API_ENDPOINT is \"https://lxd.example.com:8443\"\r\nHyperkit.api_endpoint\r\n\r\n# => \"https://lxd.example.com:8443\"\r\n```\r\n\r\n\r\n## Supported Ruby Versions\r\n\r\nThis library aims to support and is [tested against][travis] the following\r\nRuby implementations:\r\n\r\n* Ruby 2.0\r\n* Ruby 2.1\r\n* Ruby 2.2\r\n\r\nIf something doesn't work on one of these interpreters, it's a bug.  This\r\nlibrary may inadvertently work (or seem to work) on other Ruby\r\nimplementations, however support will only be provided for the versions listed\r\nabove.\r\n\r\nIf you would like this library to support another Ruby version, you may\r\nvolunteer to be a maintainer. Being a maintainer entails making sure all tests\r\nrun and pass on that implementation. When something breaks on your\r\nimplementation, you will be responsible for providing patches in a timely\r\nfashion. If critical issues for a particular implementation exist at the time\r\nof a major release, support for that Ruby version may be dropped.\r\n\r\n[travis]: https://travis-ci.org/jeffshantz/hyperkit\r\n\r\n## Versioning\r\n\r\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\r\nof this scheme should be reported as bugs. Specifically, if a minor or patch\r\nversion is released that breaks backward compatibility, that version should be\r\nimmediately yanked and/or a new version should be immediately released that\r\nrestores compatibility. Breaking changes to the public API will only be\r\nintroduced with new major versions. As a result of this policy, you can (and\r\nshould) specify a dependency on this gem using the [Pessimistic Version\r\nConstraint][pvc] with two digits of precision. For example:\r\n\r\n```ruby\r\nspec.add_dependency 'hyperkit', '~> 1.0'\r\n```\r\n[semver]: http://semver.org/\r\n[pvc]: http://docs.rubygems.org/read/chapter/16#page74\r\n\r\n## Development\r\n\r\nAfter checking out the repo, run `bin/setup` to install dependencies. Then,\r\nrun `rake spec` to run the tests. You can also run `bin/console` for an\r\ninteractive prompt that will allow you to experiment.\r\n\r\nTo install this gem onto your local machine, run `bundle exec rake install`.\r\nTo release a new version, update the version number in `version.rb`, and then\r\nrun `bundle exec rake release`, which will create a git tag for the version,\r\npush git commits and tags, and push the `.gem` file to\r\n[rubygems.org](https://rubygems.org).\r\n\r\n## Contributing\r\n\r\nBug reports and pull requests are welcome on GitHub at\r\nhttps://github.com/jeffshantz/hyperkit. This project is intended to be a safe,\r\nwelcoming space for collaboration, and contributors are expected to adhere to\r\nthe [Contributor Covenant](http://contributor-covenant.org) code of conduct.\r\n\r\n## License\r\n\r\nThe gem is available as open source under the terms of the [MIT\r\nLicense](http://opensource.org/licenses/MIT).  Its design is based on Octokit,\r\nalso licensed under the MIT license.  See the file `LICENSE.txt` for more\r\ninformation.\r\n\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}